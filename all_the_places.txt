This is the result of running `grep thread.*source ./src`

I found it interesting because there are actually *very* few places that this
touches the rest of our code compared to what I expected.

Comments

src/ui/actions/comments.ts
|99| return Promise.race([ThreadFront.getCurrentPauseSourceLocation(), waitForTime(1000)]);
|161| const sourceContent = await ThreadFront.getSourceContents(sourceId);

---

Logpoint - this is kind of important, but not huge.

src/ui/actions/logpoint.ts
|231| const sourceIds = ThreadFront.getCorrespondingSourceIds(location.sourceId);
|264| locations.map(({ sourceId }) => ThreadFront.getBreakpointPositionsCompressed(sourceId))
|422| const sourceIds = ThreadFront.getChosenSourceIdsForUrl(url).map(({ sourceId }) => sourceId);

---

This is the new reducer, could easily be switched

src/ui/reducers/sources.ts
|125| const response = await ThreadFront.getSourceContents(sourceId);

SmartTrace which is only used for the old console and object inspector I think.

src/devtools/client/shared/components/SmartTrace.js
|56| const sourceIds = ThreadFront.getGeneratedSourceIdsForURL(filename);
|70| filename: await ThreadFront.getSourceURL(mapped.sourceId),

Messages for the old console

src/devtools/client/webconsole/actions/messages.ts
|68| filename: await ThreadFront.getSourceURL(location.sourceId),
|94| url = await ThreadFront.getSourceURL(location.sourceId);
|99| const ids = ThreadFront.getSourceIdsForURL(url!);
|111| url = await ThreadFront.getSourceURL(location.sourceId);
|155| sourceName: await ThreadFront.getSourceURL(sourceId),
|185| sourceName: await ThreadFront.getSourceURL(sourceId),

Sourcemap visualizer

src/devtools/client/debugger/src/utils/sourceVisualizations.ts
|16| if (ThreadFront.isMinifiedSource(sourceId)) {
|19| const correspondingSourceId = ThreadFront.getCorrespondingSourceIds(sourceId)[0];
|79| const generatedSourceIds = ThreadFront.getGeneratedSourceIds(sourceId);
|81| ThreadFront.getSourceKind(sourceId) === "prettyPrinted" ? generatedSourceIds?.[0] : sourceId;
|84| if (ThreadFront.getSourceKind(nonPrettyPrintedSourceId) === "sourceMapped") {
|85| const generatedSourceId = ThreadFront.getGeneratedSourceIds(nonPrettyPrintedSourceId)?.[0];
|87| const sourceId = ThreadFront.getPrettyPrintedSourceId(generatedSourceId) || generatedSourceId;
|91| const sourcemappedSourceIds = ThreadFront.getOriginalSourceIds(nonPrettyPrintedSourceId)?.filter(
|92| sourceId => ThreadFront.getSourceKind(sourceId) === "sourceMapped"
|102| ThreadFront.getPrettyPrintedSourceId(sourcemappedSourceIds[0]) || sourcemappedSourceIds[0],

src/devtools/client/debugger/src/components/Editor/SourcemapToggle.tsx|51| enabled={ThreadFront.isSourceMappedSource(selectedSource.id)}

Search things
src/devtools/client/debugger/src/components/FullTextSearch/search.js|49| await ThreadFront.searchSources({ query, sourceIds }, matches => {
src/devtools/client/debugger/src/actions/ast.ts|31| await ThreadFront.searchFunctions({ query, sourceIds }, matches => {

newSources stuff, which I think can go away when everything else does pretty
easily.
src/devtools/client/debugger/src/actions/sources/newSources.ts|222| for (const { thread, isServiceWorker, source, id } of sourceInfo) {
src/devtools/client/debugger/src/actions/sources/newSources.ts|225| const kind = ThreadFront.getSourceKind(source.actor);
src/devtools/client/debugger/src/actions/sources/newSources.ts|236| if (ThreadFront.isMinifiedSource(source.actor)) {

This is probably the meat of it.

src/devtools/client/debugger/src/actions/sources/select.ts|163| let sourceId = ThreadFront.getChosenSourceIdsForUrl(location.sourceUrl)[0].sourceId;
src/devtools/client/debugger/src/actions/sources/select.ts|164| sourceId = ThreadFront.getCorrespondingSourceIds(sourceId)[0];
src/devtools/client/debugger/src/actions/sources/select.ts|241| if (ThreadFront.isSourceMappedSource(oldSourceId)) {
src/devtools/client/debugger/src/actions/sources/select.ts|242| ThreadFront.preferSource(newSourceId, true);
src/devtools/client/debugger/src/actions/sources/select.ts|244| ThreadFront.preferSource(oldSourceId, false);

src/devtools/client/debugger/src/client/commands.ts|140| promises.push(ThreadFront.setBreakpoint(sourceId, line, column!, condition!));
src/devtools/client/debugger/src/client/commands.ts|149| promises.push(ThreadFront.setBreakpointByURL(sourceUrl!, line, column!, condition!));
src/devtools/client/debugger/src/client/commands.ts|165| return ThreadFront.removeBreakpoint(sourceId, line, column!);
src/devtools/client/debugger/src/client/commands.ts|167| return ThreadFront.removeBreakpointByURL(sourceUrl!, line, column!);
src/devtools/client/debugger/src/client/commands.ts|299| await ThreadFront.unblackbox(sourceActor.actor, begin, end);
src/devtools/client/debugger/src/client/commands.ts|301| await ThreadFront.blackbox(sourceActor.actor, begin, end);
